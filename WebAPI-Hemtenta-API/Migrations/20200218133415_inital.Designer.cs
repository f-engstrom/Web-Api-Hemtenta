// <auto-generated />
using API_Web_API_Kurs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;


namespace API_Web_API_Kurs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200218133415_inital")]
    partial class inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JavaScript_hemtenta.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Byxor",
                            UrlSlug = "byxor"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Herrkläder",
                            UrlSlug = "herrkläder"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Damkläder",
                            UrlSlug = "damkläder"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Klänningar",
                            UrlSlug = "byxor"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Blusar",
                            UrlSlug = "blusar"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Tröjor",
                            UrlSlug = "tröjor"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://via.placeholder.com/350x400?text=Category",
                            Name = "Skor",
                            UrlSlug = "skor"
                        });
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MainMenu"
                        });
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "/byxor",
                            MenuId = 1,
                            Name = "Byxor",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Link = "/klänningar",
                            MenuId = 1,
                            Name = "Klännigar",
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            Link = "/blusar",
                            MenuId = 1,
                            Name = "Blusar",
                            Priority = 3
                        },
                        new
                        {
                            Id = 4,
                            Link = "/tröjor",
                            MenuId = 1,
                            Name = "Tröjor",
                            Priority = 4
                        },
                        new
                        {
                            Id = 5,
                            Link = "/skor",
                            MenuId = 1,
                            Name = "Skor",
                            Priority = 5
                        },
                        new
                        {
                            Id = 6,
                            Link = "/damkläder",
                            MenuId = 1,
                            Name = "Damkläder",
                            Priority = 6
                        },
                        new
                        {
                            Id = 7,
                            Link = "/herrkläder",
                            MenuId = 1,
                            Name = "Herrkläder",
                            Priority = 7
                        });
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bästa byxorna denna sidan av Båstad",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Goa Brallor",
                            Price = 1200m,
                            UrlSlug = "goa-brallor"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kortaste kortbyxorna",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Små kortbyxor",
                            Price = 1200m,
                            UrlSlug = "små-kortbyxor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "fina skosingar för den medvetne",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Fina Pjucks",
                            Price = 1200m,
                            UrlSlug = "fina-pjucks"
                        },
                        new
                        {
                            Id = 4,
                            Description = "En bluesig blus för den som är nere",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Blues",
                            Price = 1200m,
                            UrlSlug = "blues"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Het tröja",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Caliente",
                            Price = 1200m,
                            UrlSlug = "caliente"
                        },
                        new
                        {
                            Id = 6,
                            Description = "En otrolig produkt på denna sida",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Någon produkt",
                            Price = 1200m,
                            UrlSlug = "någon-produkt"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Ännu en grej",
                            ImageUrl = "https://via.placeholder.com/350x400?text=Clothing",
                            Name = "Ännu något",
                            Price = 1200m,
                            UrlSlug = "ännu-något"
                        });
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Id = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            Id = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Id = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Id = 4
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Id = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Id = 6
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Id = 7
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3,
                            Id = 8
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 6,
                            Id = 9
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Id = 10
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4,
                            Id = 11
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Id = 12
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 5,
                            Id = 13
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Id = 14
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.MenuItem", b =>
                {
                    b.HasOne("JavaScript_hemtenta.Models.Menu", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JavaScript_hemtenta.Models.ProductCategory", b =>
                {
                    b.HasOne("JavaScript_hemtenta.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JavaScript_hemtenta.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
